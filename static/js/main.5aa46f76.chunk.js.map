{"version":3,"sources":["component/Counter/Controls.js","redux/counter/counter-types.js","redux/counter/counter-actions.js","component/Counter/Value.js","component/Counter/Counter.js","App.js","redux/counter/couter-reduser.js","redux/store.js","index.js"],"names":["Controls","step","onIncrement","onDecrement","className","type","onClick","value","actionsTypes","payload","Value","connect","state","counter","disaptch","counterActions","App","combineReducers","action","actionTypes","rootReducer","counterReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAaeA,EAXE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,YAAtB,OACf,sBAAKC,UAAU,oBAAf,UACE,yBAAQC,KAAK,SAASC,QAASH,EAA/B,iFACgBF,KAEhB,yBAAQI,KAAK,SAASC,QAASJ,EAA/B,iFACgBD,SCLL,EAHG,oBAGH,EAFG,oBCWH,EAVG,SAAAM,GAAK,MAAK,CAC1BF,KAAMG,EACNC,QAASF,IAQI,EALG,SAAAA,GAAK,MAAK,CAC1BF,KAAMG,EACNC,QAASF,ICLIG,G,MAFD,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OAAe,sBAAMH,UAAU,iBAAhB,SAAkCG,MCkB/D,IAUeI,eAVS,SAAAC,GAAK,MAAK,CAChCL,MAAOK,EAAMC,QAAQN,MACrBN,KAAMW,EAAMC,QAAQZ,SAGK,SAAAa,GAAQ,MAAK,CACtCZ,YAAa,SAAAK,GAAK,OAAIO,EAASC,EAAyBR,KACxDJ,YAAa,SAAAI,GAAK,OAAIO,EAASC,EAAyBR,QAG3CI,EAvBf,YAA6D,IAA1CJ,EAAyC,EAAzCA,MAAON,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,YAC3C,OACE,sBAAKC,UAAU,UAAf,UACE,cAAC,EAAD,CAAOG,MAAOA,IACd,cAAC,EAAD,CACEN,KAAMA,EACNC,YAAa,kBAAMA,EAAYD,IAC/BE,YAAa,kBAAMA,EAAYF,YCJxBe,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,O,eCYSa,4BAAgB,CAC7BV,MAfmB,WAAwB,IAAvBK,EAAsB,uDAAd,EAAGM,EAAW,uCAC1C,OAAQA,EAAOb,MACb,KAAKc,EACH,OAAOP,EAAQM,EAAOT,QAExB,KAAKU,EACH,OAAOP,EAAQM,EAAOT,QACxB,QACE,OAAOG,IAQXX,KAJkB,eAACW,EAAD,uDAAS,IAAT,OAAyBA,KCXvCQ,EAAcH,0BAAgB,CAClCJ,QAASQ,IAKIC,EAFDC,sBAAYH,EAAaI,iCCFvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.5aa46f76.chunk.js","sourcesContent":["import React from 'react';\n\nconst Controls = ({ step, onIncrement, onDecrement }) => (\n  <div className=\"Counter__controls\">\n    <button type=\"button\" onClick={onDecrement}>\n      Уменьшить на {step}\n    </button>\n    <button type=\"button\" onClick={onIncrement}>\n      Увеличить на {step}\n    </button>\n  </div>\n);\n\nexport default Controls;\n","const INCREMENT = 'counter/Increment';\nconst DECREMENT = 'counter/Decrement';\n\nexport default { INCREMENT, DECREMENT };\n","import actionsTypes from './counter-types';\n\nconst increment = value => ({\n  type: actionsTypes.INCREMENT,\n  payload: value,\n});\n\nconst decrement = value => ({\n  type: actionsTypes.DECREMENT,\n  payload: value,\n});\n\nexport default { increment, decrement };\n","import React from 'react';\n\nconst Value = ({ value }) => <span className=\"Counter__value\">{value}</span>;\n\nexport default Value;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Controls from './Controls';\nimport counterActions from '../../redux/counter/counter-actions';\nimport './Counter.css';\nimport Value from './Value';\n\nfunction Counter({ value, step, onIncrement, onDecrement }) {\n  return (\n    <div className=\"Counter\">\n      <Value value={value} />\n      <Controls\n        step={step}\n        onIncrement={() => onIncrement(step)}\n        onDecrement={() => onDecrement(step)}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.counter.value,\n  step: state.counter.step,\n});\n\nconst mapDispatchToProps = disaptch => ({\n  onIncrement: value => disaptch(counterActions.increment(value)),\n  onDecrement: value => disaptch(counterActions.decrement(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","import Counter from './component/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport actionTypes from './counter-types';\n\nconst valueReducer = (state = 0, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return state + action.payload;\n\n    case actionTypes.DECREMENT:\n      return state - action.payload;\n    default:\n      return state;\n  }\n};\n\nconst stepReducer = (state = 100, action) => state;\n\nexport default combineReducers({\n  value: valueReducer,\n  step: stepReducer,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport counterReducer from './counter/couter-reduser';\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}